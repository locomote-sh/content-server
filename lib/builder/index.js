/*
   Copyright 2019 Locomote.sh

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

const Net = require('net');

const { IPCService } = require('understruct');

const Log = require('log4js').getLogger('builder');

const service = new IPCService('builder');

service.events = ['content-repo-update','service-restart'];

service.messages = {
    notifyContentUpdate: function( account, repo, branch ) {
        let info = this._makeBuildInfo( account, repo, branch );
        this._notifyContentUpdate( info );
    },
    addToBuildQueue: function( account, repo, branch ) {
        let info = this._makeBuildInfo( account, repo, branch );
        this._buildQueue( info );
    },
    ping: function() {
        return 'Builder present';
    }
};

service.initClient = function( settings ) {
    // Build settings.
    const buildSettings = settings.get('build');
    // Attach http subservice.
    this.http = require('./httpapi').make( this, buildSettings );
}

service.initServer = function( settings, core, manifests, branchdb ) {

    const server = this;

    // Build settings.
    const buildSettings = settings.get('build');

    const buildQueue = require('./build-queue')
        .start( core, manifests, branchdb, buildSettings, server );

    /** 
     * Handle a content update notification.
     * The 'handleInternalCUNotifications' setting must be set to 'true' on platforms
     * where the git post-receive hook isn't used (e.g. where gogs is used and co-opts
     * the hook for its own needs).
     * @param info      Info identifying the updated content.
     * @param source    The notification source; values are 'external' for notifications
     *                  received via the updates socket listener; and 'internal' for
     *                  notifications generated by the builder and other server components.
     */
    function notifyContentUpdate( info, source = 'internal' ) {
        if( source == 'external' || buildSettings.handleInternalCUNotifications ) {
            Log.debug('Content update: %s', info.key );
            // Add update item to build queue.
            buildQueue( info );
            // Issue content repo update event.
            server.emit('content-repo-update', info );
        }
    }

    /**
     * Parse a repo update key into its useful components.
     * Build key is in format '{account}/{repo}.git/{branch}'.
     */
    function parseBuildKey( key ) {
        let [ account, repo, branch ] = key.split('/');
        // Strip trailing .git from repo name, if any.
        repo = repo.replace(/\.git$/,'');
        return core.makeBuildInfo( account, repo, branch );
    }

    try {
        // Create socket to list for content repo update notifications.
        let { hostname, port } = buildSettings.updatesListener;
        Net.createServer( ( socket ) => {
            socket.on('data', ( data ) => {
                let key = data.toString().trim();
                Log.debug('Content update notification: %s', key );
                let info = parseBuildKey( key );
                notifyContentUpdate( info, 'external');
            })
        })
        .listen( port, hostname );
        Log.info('Listening for content update notifications on %s:%d', hostname, port );
    }
    catch( e ) {
        Log.error('Error create content update notification listener', e );
    }

    // Set service instance methods.
    this._buildQueue          = buildQueue;
    this._makeBuildInfo       = core.makeBuildInfo.bind( core );
    this._notifyContentUpdate = notifyContentUpdate;
    this._parseBuildKey       = parseBuildKey;

    // Perform startup check for pending builds.
    require('./startup-check').run( this, branchdb );

    // Notify any remote listeners of builder service restart.
    this.emit('service-restart', {});
}

module.exports = service;
